type Query {
  ping: String
  getUserByName(input: GetUserByNameInput!): User
  getSelfByName(input: GetSelfByNameInput!): User
  getTracks(input: GetTracksInput!): Tracks!
}

type Mutation {
  createTrack(input: CreateTrackInput!): Track!
}

type Tracks {
  items: [Track!]!
  pagination: Pagination!
}

type Track {
  id: String
  name: String!
  userId: String!
  user: User

  locations: [Point!]!

  createdAt: String
  updatedAt: String
}

type Point {
  id: String
  timestamp: Int!
  trackId: String!
  track: Track

  latitude: Int!
  longitude: Int!
  altitude: Int!
  accuracy: Int!
  heading: Int!
  speed: Int!

  createdAt: String
  updatedAt: String
}

type User {
  id: ID!
  name: String!
  slugName: String!
  email: String!
  image: String
  bio: String
  updatedAt: String
  createdAt: String
}

type Pagination {
  totalRecords: Int!
  currentLimit: Int!
  currentPage: Int!
  hasNextPage: Boolean!
}

enum ToastTypes {
  success
  info
  warning
  error
}

type Toast {
  text: String!
  type: ToastTypes!
}

input GetUserByNameInput {
  name: String!
}

input GetSelfByNameInput {
  name: String!
}

input GetTracksInput {
  limit: Int
  page: Int
}

input PointInput {
  timestamp: Int!

  latitude: Int!
  longitude: Int!
  altitude: Int!
  accuracy: Int!
  heading: Int!
  speed: Int!
}

input CreateTrackInput {
  name: String!
  locations: [PointInput!]!
}
